{"version":3,"file":null,"sources":["../src/utilities.ts","../src/perceptron.ts"],"sourcesContent":["export function zip<T>(xs: T[], ys: T[]) {\r\n  const smallerArray = xs.length < ys.length ? xs : ys;\r\n\r\n  return smallerArray\r\n    .map((x, i) => [xs[i], ys[i]]);\r\n}\r\n\r\nexport function dotProduct(xs: number[], ys: number[]) {\r\n  return zip(xs, ys)\r\n    .map(([x,y]) => x * y)\r\n    .reduce((a, b) => a + b)\r\n}","import * as util from './utilities';\r\n\r\nexport interface ITrainingData {\r\n  vector: number[];\r\n  output: boolean;\r\n}\r\n\r\nexport interface ILearningData extends ITrainingData {\r\n  weights: number[];\r\n  dotProduct: number;\r\n  threshold: number;\r\n  result: boolean;\r\n  weightsChanged: boolean;\r\n}\r\n\r\nexport class Perceptron {\r\n  threshold: number;\r\n  learningRate: number = 0.1;\r\n  weights: number[];\r\n  \r\n  train(trainingSet: ITrainingData[], learningRate: number = this.learningRate): ILearningData[] {\r\n    if (trainingSet.length === 0) {\r\n      throw new Error(`trainingSet data must be non-empty array. You provided: ${trainingSet}`);\r\n    }\r\n\r\n    // Create new weights vector matching length of training data and set values to 0\r\n    const weights: number[] = Array.apply(null, new Array(trainingSet[0].vector.length + 1)).map(() => 0);\r\n    const learningSet: ILearningData[] = [];\r\n    const theta = 0;\r\n    const maxIterations = 2000;\r\n    let i: number;\r\n\r\n    for(i = 0; i < maxIterations; i++) {\r\n      let errorCount = 0;\r\n      trainingSet\r\n        .forEach(({ vector, output }) => {\r\n          const trainingVector = vector.concat([1]);\r\n          const dotProduct = util.dotProduct(trainingVector, weights);\r\n          const result = dotProduct >= theta;\r\n          const error = (output ? 1 : 0) - (result ? 1 : 0);\r\n\r\n          const learningData: ILearningData = {\r\n            weights: weights.slice(0,2),\r\n            vector: vector.slice(0),\r\n            dotProduct,\r\n            result,\r\n            threshold: -weights[2],\r\n            output,\r\n            weightsChanged: false\r\n          };\r\n\r\n          learningSet.push(learningData);\r\n\r\n          if (error !== 0) {\r\n            errorCount += 1;\r\n            learningSet[learningSet.length-1].weightsChanged = true;\r\n            trainingVector\r\n              .forEach((x, i) => {\r\n                weights[i] += learningRate * error * x;\r\n              });\r\n          }\r\n        });\r\n\r\n      if (errorCount === 0) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.weights = weights.slice(0,2);\r\n    this.threshold = -weights[2];\r\n\r\n    if (i === maxIterations) {\r\n      throw new Error('Max Iterations reached. The training loop was terminated to prevent infinite loop');\r\n    }\r\n\r\n    return learningSet;\r\n  }\r\n\r\n  perceive(vector: number[], weights = this.weights, threshold = this.threshold): boolean {\r\n    if(vector.length !== weights.length) {\r\n      throw new Error(`The number of dimensions of the input vector must match the number of weights. You passed vector length: ${vector.length}, weights.length: ${weights.length}`);\r\n    }\r\n\r\n    return util.dotProduct(vector, weights) >= threshold;\r\n  }\r\n}"],"names":["dotProduct","util.dotProduct"],"mappings":"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"}